#!/bin/sh
#
# btrfsbuilder - use btrfs snapshots for pbuilder
#
# Copyright (c) 2010, Adrian Friedli
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# Installation
#
# Create the directory /var/cache/pbuilder/btrfs and mount there (or anywhere
# above in the file system tree) a btrfs file system.
#
# Make sure you have this in /etc/pbuilderrc or any other pbuilder config file,
# as hardlinks between subvolumes are not allowed:
#
# APTCACHEHARDLINK=no
#
# Using eatmydata will massively increase performance. You may add this to your
# pbuilderrc:
#
# EXTRAPACKAGES="eatmydata"
# if [ -z "$LD_PRELOAD" ]; then
#   LD_PRELOAD=/usr/lib/libeatmydata/libeatmydata.so
# else
#   LD_PRELOAD="$LD_PRELOAD":/usr/lib/libeatmydata/libeatmydata.so
# fi
# export LD_PRELOAD

set -e

do_help() {
    echo foo
    exit 1
}

for cf in "/etc/btrfsbuilderrc" "$HOME/.btrfsbuilderrc"; do
    [ -f "$cf" ] && . "$cf"
done

ACTION="$1"; [ -n "$1" ] && shift
while true; do
    case "$1" in
        --btrfspath)
            BTRFSPATH="$2";  shift 2 ;;
        --basedir)
            BASEDIR="$2";    shift 2 ;;
        --basepath)
            BASEPATH="$2";   shift 2 ;;
        --buildplace)
            BUILDPLACE="$2"; shift 2 ;;
        --configfile)
            . "$2"; shift 2 ;;
        --)
            shift; break ;;
        *)
            break ;;
    esac
done

BTRFSPATH=${BTRFSPATH:-"/var/cache/pbuilder/btrfs"}
BASEDIR=${BASEDIR:-"base"}
BASEPATH=${BASEPATH:-"$BTRFSPATH/$BASEDIR"}
BUILDPLACE=${BUILDPLACE:-"$BTRFSPATH/$$"}

pbuilder_run()
{
    pbuilder "$ACTION" --buildplace "$BUILDPLACE" --no-targz "$@" || \
        {
            RES=$?
            btrfs_delete
            return $RES
        }
}

btrfs_snapshot() { btrfs subvolume snapshot "$BASEPATH" "$BUILDPLACE"; }
btrfs_delete() { btrfs subvolume delete "${1:-"$BUILDPLACE"}"; }

case "$ACTION" in
    ""|-h|--help|help)
        do_help ;;
    --create|create)
        btrfs subvolume create "$BASEPATH"
        BUILDPLACE="$BASEPATH"
        pbuilder_run "$@"
        ;;
    --update|update)
        btrfs_snapshot
        pbuilder_run "$@"
        btrfs_delete "$BASEPATH"
        mv -v "$BUILDPLACE" "$BASEPATH"
        ;;
    --build|build|--login|login|--execute|execute|--debuild|debuild)
        btrfs_snapshot
        pbuilder_run "$@"
        btrfs_delete
        ;;
    --clean|clean)
        BUILDPLACE="$BASEPATH"
        pbuilder_run "$@"
        btrfs_delete
        ;;
    --dumpconfig|dumpconfig)
        echo "not implemented"
        exit 1
        ;;
    *)
        echo "\`$ACTION' is not a valid command. See \`$0 --help' for details."
        exit 1
        ;;
esac
